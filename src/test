はい、Power Appsでの詳細な実装方法を記載します。

1. 画面構成の詳細設計

```text
スクリーン名: 点検回答画面

// トップレベルコンテナ
MainContainer
- Width: Parent.Width * 0.98
- Height: Parent.Height * 0.98
- Fill: White
- BorderRadius: 8
- BorderStyle: Solid
- BorderColor: #E5E7EB

// サブコンテナ（余白確保用）
ContentContainer
- Padding: 24
- Fill: Transparent
```

2. 要素ごとの詳細設定

```text
A. ヘッダー部分
HeaderContainer
- Height: 80
- Fill: Transparent
- BorderThickness: 0,0,1,0
- BorderColor: #E5E7EB

// 左側
HeaderTitleGroup
- Layout: Horizontal
- AlignItems: Center
- Gap: 8

IconImage
- Image: If(ThisItem.状態 = "点検完了", CheckCircle, AlertCircle)
- Width: 24
- Height: 24
- Color: If(ThisItem.状態 = "点検完了", "#059669", "#2563EB")

TitleLabel
- Text: "点検・回答フォーム"
- Font: Segoe UI
- FontWeight: Bold
- Size: 18

// 右側
HeaderStatusGroup
- Layout: Horizontal
- AlignItems: Center
- Gap: 16

StatusLabel
- Text: formData.status
- PaddingLeft: 12
- PaddingRight: 12
- PaddingTop: 4
- PaddingBottom: 4
- BorderRadius: 20
- Fill: Switch(
    formData.status,
    "点検完了", "#DEF7EC",
    "回答済", "#DBEAFE",
    "差戻", "#FEE2E2",
    "#FEF3C7"
  )
- Color: Switch(
    formData.status,
    "点検完了", "#03543F",
    "回答済", "#1E40AF",
    "差戻", "#7F1D1D",
    "#92400E"
  )

ApplicationNumberLabel
- Text: "申請番号: " & ThisItem.申請番号
- Color: "#6B7280"
- Size: 14

B. フォーム部分
FormContainer
- Layout: Vertical
- Gap: 24

// 点検視点
InspectionPointGroup
LabelInspectionPoint
- Text: "点検視点 *"
- Size: 14
- FontWeight: Semibold

DropdownInspectionPoint
- Items: inspectionPoints
- Width: Parent.Width
- Height: 40
- BorderColor: "#E5E7EB"
- BorderRadius: 4
- Enabled: isInspector && ThisItem.状態 <> "点検完了"

// 点検内容
InspectionContentGroup
LabelInspectionContent
- Text: "点検内容 *"
- Size: 14
- FontWeight: Semibold

TextInputInspectionContent
- Mode: MultiLine
- Height: 120
- DefaultText: "具体的な不備内容と修正すべき点を入力してください"
- BorderColor: "#E5E7EB"
- BorderRadius: 4
- Enabled: isInspector && ThisItem.状態 <> "点検完了"

// 回答内容
ResponseContentGroup
LabelResponseContent
- Text: "回答内容" & If(canRespond, " *", "")
- Size: 14
- FontWeight: Semibold

TextInputResponseContent
- Mode: MultiLine
- Height: 120
- DefaultText: "不備に対する対応内容を入力してください"
- BorderColor: "#E5E7EB"
- BorderRadius: 4
- Enabled: canRespond

C. ボタングループ
ButtonContainer
- Layout: Horizontal
- HorizontalAlign: Right
- Gap: 8
- PaddingTop: 16
- BorderThickness: 1,0,0,0
- BorderColor: "#E5E7EB"

// 各ボタン共通設定
Button共通
- Height: 40
- PaddingLeft: 16
- PaddingRight: 16
- BorderRadius: 4

CancelButton
- Text: "キャンセル"
- Fill: White
- Color: "#374151"
- BorderColor: "#E5E7EB"
- OnSelect: ResetForm()

RejectButton
- Text: "差戻"
- Fill: "#DC2626"
- Color: White
- Visible: isInspector && ThisItem.状態 <> "点検完了"

CompleteButton
- Text: "点検完了"
- Fill: "#059669"
- Color: White
- Visible: canComplete

ResponseButton
- Text: "回答する"
- Fill: "#2563EB"
- Color: White
- Visible: canRespond

SaveButton
- Text: "保存"
- Fill: "#2563EB"
- Color: White
```

3. 履歴テーブル部分

```text
HistoryContainer
- Layout: Vertical
- Gap: 16
- PaddingTop: 32

HistoryTitleLabel
- Text: "点検・回答履歴"
- Size: 16
- FontWeight: Semibold

HistoryGallery
- Layout: Vertical
- Items: Filter(点検履歴テーブル, 申請番号 = ThisItem.申請番号)
- TemplateSize: 60

// ギャラリーテンプレート
DateTimeLabel
- Text: ThisItem.日時
- Width: 150
- BorderStyle: Solid
- BorderColor: "#E5E7EB"
- PaddingLeft: 16
- PaddingRight: 16

RoleLabel
- Text: ThisItem.役割
- Width: 100
- BorderStyle: Solid
- BorderColor: "#E5E7EB"
- PaddingLeft: 16
- PaddingRight: 16

InspectionPointLabel
- Text: ThisItem.点検視点
- Width: 150
- BorderStyle: Solid
- BorderColor: "#E5E7EB"
- PaddingLeft: 16
- PaddingRight: 16

ContentLabel
- Text: ThisItem.内容
- Width: 300
- BorderStyle: Solid
- BorderColor: "#E5E7EB"
- PaddingLeft: 16
- PaddingRight: 16
- Wrap: true

StatusLabel
- Text: ThisItem.状態
- BorderStyle: Solid
- BorderColor: "#E5E7EB"
- PaddingLeft: 16
- PaddingRight: 16
- Fill: Switch(
    ThisItem.状態,
    "点検完了", "#DEF7EC",
    "回答済", "#DBEAFE",
    "差戻", "#FEE2E2",
    "#FEF3C7"
  )
```

4. 変数・フラグの定義

```text
// コンテキスト変数
Set(
    isInspector,
    User().Email in 点検者リスト
);

Set(
    canRespond,
    !isInspector && ThisItem.状態 = "未回答"
);

Set(
    canComplete,
    isInspector && ThisItem.状態 = "回答済"
);
```

これらの設定を組み合わせることで、元のReactコンポーネントと同様の機能とデザインを実現できます。

はい、Power Appsで実装するための全体設計を行います。

1. スクリーンの基本設定
```text
Screen名: 点検回答画面
Size: 1366 x 768
Fill: #FFFFFF
```

2. 主要コントロールの配置と設定:

A. コンテナー設定
```text
// メインコンテナー
MainContainer
- Fill: White
- Width: Parent.Width - 48
- Height: Parent.Height - 48
- Padding: 24
- BorderRadius: 8
- BorderColor: #E5E7EB

// フォームコンテナー
FormContainer
- Fill: Transparent
- Width: Parent.Width - 48
- Gap: 24
```

B. ヘッダー部分のHTML
```text
HeaderHtml
- HtmlText: ヘッダーHTML（上記で定義）
- Width: Parent.Width
- PaddingBottom: 16
```

C. 入力フォーム部分
```text
// 点検視点ドロップダウン
InspectionPointDropdown
- Items: ["申請書類の記載内容", "必要書類の提出状況", "申請要件との整合性", "記入項目の整合性", "その他"]
- Width: Parent.Width
- Height: 40
- BorderColor: #E5E7EB
- BorderRadius: 4

// 点検内容テキストボックス
InspectionContentTextInput
- Mode: MultiLine
- Height: 120
- Width: Parent.Width
- BorderColor: #E5E7EB
- BorderRadius: 4
- Enabled: User().Email in 点検者リスト && ThisItem.状態 <> "点検完了"

// 回答内容テキストボックス
ResponseContentTextInput
- Mode: MultiLine
- Height: 120
- Width: Parent.Width
- BorderColor: #E5E7EB
- BorderRadius: 4
- Enabled: !(User().Email in 点検者リスト) && ThisItem.状態 = "未回答"
```

D. ボタングループ設定
```text
// ボタンコンテナー
ButtonContainer
- LayoutMode: Horizontal
- HorizontalAlign: Right
- Gap: 8

// キャンセルボタン
CancelButton
- Text: "キャンセル"
- Fill: White
- Color: #374151
- BorderColor: #E5E7EB
- BorderRadius: 4
- Width: 100
- Height: 40

// 保存ボタン
SaveButton
- Text: "保存"
- Fill: #2563EB
- Color: White
- BorderRadius: 4
- Width: 100
- Height: 40

// 差戻ボタン
RejectButton
- Text: "差戻"
- Fill: #DC2626
- Color: White
- BorderRadius: 4
- Width: 100
- Height: 40
- Visible: User().Email in 点検者リスト && ThisItem.状態 <> "点検完了"

// 点検完了ボタン
CompleteButton
- Text: "点検完了"
- Fill: #059669
- Color: White
- BorderRadius: 4
- Width: 100
- Height: 40
- Visible: User().Email in 点検者リスト && ThisItem.状態 = "回答済"

// 回答ボタン
ResponseButton
- Text: "回答する"
- Fill: #2563EB
- Color: White
- BorderRadius: 4
- Width: 100
- Height: 40
- Visible: !(User().Email in 点検者リスト) && ThisItem.状態 = "未回答"
```

E. 履歴テーブル部分
```text
// テーブルヘッダーHTML
TableHeaderHtml
- HtmlText: テーブルヘッダーHTML（上記で定義）
- Width: Parent.Width

// 履歴ギャラリー
HistoryGallery
- Layout: Vertical
- TemplateSize: 60
- Width: Parent.Width
- Items: Filter(点検履歴テーブル, 申請番号 = ThisItem.申請番号)

// ギャラリーテンプレート内のラベル設定
DateTimeLabel
- Text: ThisItem.日時
- Width: 150
- Padding: 8
- BorderStyle: Solid
- BorderColor: #E5E7EB

RoleLabel
- Text: ThisItem.役割
- Width: 100
- Padding: 8
- BorderStyle: Solid
- BorderColor: #E5E7EB

InspectionPointLabel
- Text: ThisItem.点検視点
- Width: 150
- Padding: 8
- BorderStyle: Solid
- BorderColor: #E5E7EB

ContentLabel
- Text: ThisItem.内容
- Width: 300
- Padding: 8
- BorderStyle: Solid
- BorderColor: #E5E7EB

StatusLabel
- Text: ThisItem.状態
- Padding: 8
- BorderStyle: Solid
- BorderColor: #E5E7EB
- Fill: Switch(
    ThisItem.状態,
    "点検完了", "#DEF7EC",
    "回答済", "#DBEAFE",
    "差戻", "#FEE2E2",
    "#FEF3C7"
  )
```

F. データソース設定
```text
// 点検履歴テーブル（SharePoint リスト）
列名:
- Title (申請番号)
- 日時 (DateTime)
- 役割 (Choice: "点検者"/"回答者")
- 点検視点 (Choice)
- 内容 (MultiLine)
- 状態 (Choice: "未回答"/"回答済"/"点検完了"/"差戻")
- 作成者 (Person)
```

G. OnSelect などのイベント処理
```text
// 保存ボタン
SaveButton.OnSelect = 
If(
    IsBlank(点検内容),
    Notify("点検内容を入力してください", NotificationType.Warning),
    Patch(
        点検履歴テーブル,
        {
            Title: ThisItem.申請番号,
            日時: Now(),
            役割: If(User().Email in 点検者リスト, "点検者", "回答者"),
            点検視点: InspectionPointDropdown.Selected.Value,
            内容: 点検内容,
            状態: "未回答"
        }
    );
    ResetForm(FormContainer)
)
```

これらの設定により、Power Appsで適切なレイアウトとインタラクションを実現できます。HTML部分とPower Appsのネイティブコントロールを組み合わせることで、より柔軟な実装が可能になります。

次のステップとしては：
1. 画面レイアウトの確認
2. データ連携の実装
3. ボタンアクションの詳細実装
4. 条件付き表示のテスト
5. ユーザー権限の設定

はい、Power AppsのHTML Text形式に変換します。改行やスペースを調整して、Power Appsで利用しやすい形式にします。

```text
HtmlText1.HtmlText =
"<div style='padding:24px; font-family:Segoe UI;'>
  <!-- ヘッダー部分 -->
  <div style='display:flex; justify-content:space-between; align-items:center; padding-bottom:16px; border-bottom:1px solid #E5E7EB; margin-bottom:24px;'>
    <div style='display:flex; align-items:center;'>
      <!-- アイコンはPower Apps側で制御 -->
      <span style='font-size:18px; font-weight:600; margin-left:8px;'>点検・回答フォーム</span>
    </div>
    <div style='display:flex; align-items:center;'>
      <span style='padding:4px 12px; border-radius:9999px; font-size:14px; margin-right:16px; background-color:" & 
        Switch(
          ThisItem.状態,
          "点検完了", "#DEF7EC",
          "回答済", "#DBEAFE",
          "差戻", "#FEE2E2",
          "#FEF3C7"
        ) & "; color:" &
        Switch(
          ThisItem.状態,
          "点検完了", "#03543F",
          "回答済", "#1E40AF",
          "差戻", "#7F1D1D",
          "#92400E"
        ) & ";'>" & 
        ThisItem.状態 & 
      "</span>
      <span style='font-size:14px; color:#6B7280;'>申請番号: " & ThisItem.申請番号 & "</span>
    </div>
  </div>

  <!-- フォームラベル部分 -->
  <div style='margin-bottom:24px;'>
    <label style='display:block; font-size:14px; font-weight:500; margin-bottom:4px;'>
      点検視点
      <span style='color:#EF4444; margin-left:4px;'>*</span>
    </label>
  </div>

  <div style='margin-bottom:24px;'>
    <label style='display:block; font-size:14px; font-weight:500; margin-bottom:4px;'>
      点検内容
      <span style='color:#EF4444; margin-left:4px;'>*</span>
    </label>
  </div>

  <div style='margin-bottom:24px;'>
    <label style='display:block; font-size:14px; font-weight:500; margin-bottom:4px;'>
      回答内容" &
      If(
        !isInspector && ThisItem.状態 = "未回答",
        "<span style='color:#EF4444; margin-left:4px;'>*</span>",
        ""
      ) & "
    </label>
  </div>

  <!-- 履歴テーブル部分 -->
  <div style='margin-top:32px;'>
    <h3 style='font-size:16px; font-weight:500; margin-bottom:16px;'>点検・回答履歴</h3>
    <div style='overflow-x:auto;'>
      <table style='width:100%; border-collapse:collapse;'>
        <thead>
          <tr style='background-color:#F3F4F6;'>
            <th style='border:1px solid #E5E7EB; padding:8px 16px; text-align:left;'>日時</th>
            <th style='border:1px solid #E5E7EB; padding:8px 16px; text-align:left;'>役割</th>
            <th style='border:1px solid #E5E7EB; padding:8px 16px; text-align:left;'>点検視点</th>
            <th style='border:1px solid #E5E7EB; padding:8px 16px; text-align:left;'>内容</th>
            <th style='border:1px solid #E5E7EB; padding:8px 16px; text-align:left;'>状態</th>
          </tr>
        </thead>
      </table>
    </div>
  </div>
</div>"
```

注意点：
1. テーブルの本体（tbody）部分はギャラリーコントロールで実装
2. 入力フィールド（select, textarea）はPower Appsのネイティブコントロールで実装
3. ボタン群はPower Appsのボタンコントロールで実装
4. 動的な値（ThisItem.状態 など）は Power Apps の変数で制御
5. スタイリングはインラインスタイルのみ使用

実装手順：
1. HTMLテキストコントロールを配置し、上記のHTMLを設定
2. コントロールの配置：
   - ドロップダウン（点検視点）
   - テキストエリア（点検内容）
   - テキストエリア（回答内容）
   - ボタン群
   - ギャラリー（履歴表示用）

これにより、Power Appsでも元のデザインに近い見た目を実現できます。テーブルのデータ部分は、ギャラリーコントロールで実装することで、動的なデータの表示と更新が可能になります。
