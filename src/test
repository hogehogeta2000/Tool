# 育成計画：Power Platformにおける人材育成プログラム

## 1. 計画の趣旨
- **目的**: Power AppsとPower Automateの知識を身に付け、クライアント向けにアプリケーションとフローを作成し、エラートラブルシューティングができる人材を育成する。
- **ゴール**: 
  - Power AppsとPower Automateの基本的・高度な知識を取得する。
  - クライアント向けにアプリケーションやワークフローを作成できる。
  - 自らエラーのトラブルシューティングを実施し、必要に応じてエスカレーションができる。

## 2. 達成目標
- **技術的知識の習得**
  - Power Apps、Power Automateのプラットフォーム知識
  - 承認ワークフローシステムの理解
  - トラブルシューティングスキル
  - HTTPリクエストおよびSharePoint REST APIに関する高度な知識
  - Power Platformの環境に関する理解
- **結果目標**
  - ベテラン開発者が作成したPower AppsやPower Automateのシステムを理解し、トラブルシューティングやエスカレーションを実施できる。

## 3. トレーニング期間
- **期間**: 約6ヶ月

## 4. トレーニングの流れ
1. **計画書の作成**: 育成計画の詳細な目標とスケジュールを策定。
2. **アクションプランの作成**: 必要となる具体的なアクションを決定。
   - 金銭的支援を含めた詳細な内容を明記。

## 5. 進捗管理
- **達成目標**の設定: 6ヶ月間の各期間で達成すべき具体的な目標を設定。
- **進捗モニタリング**: 進捗状況を定期的に確認し、目標達成度合いを評価。
- **成長評価**: 成長度を確認し、本人の成果を評価する内容を含める。

## 6. 成長評価のポイント
- 技術的スキルの向上
- トラブルシューティング能力
- エスカレーションの正確性と対応力

以下に、達成目標に対しての段取りを示すフローチャートをMermaid形式で記載します。このフローチャートは、育成計画の流れと進捗管理を段階的に可視化します。

```mermaid
graph TD
    A[育成計画のスタート] --> B[計画書の作成]
    B --> C[アクションプランの決定]
    C --> D[金銭的支援や具体的内容の決定]

    D --> E[初期トレーニング実施]
    E --> F[技術的知識の習得: Power Apps/Power Automate基礎]
    F --> G[基礎知識評価]

    G --> H{基礎知識が適切に身についたか？}
    H -->|はい| I[次のステップへ]
    H -->|いいえ| E

    I --> J[中級トレーニング: HTTPリクエスト、REST API]
    J --> K[トラブルシューティング能力評価]
    K --> L{能力が十分か？}
    L -->|はい| M[応用トレーニング: 承認ワークフロー理解]
    L -->|いいえ| J

    M --> N[トラブルシューティングとエスカレーション練習]
    N --> O[進捗モニタリング]

    O --> P{成長評価: 達成目標に沿って評価}
    P -->|目標達成| Q[育成計画完了]
    P -->|改善が必要| C
```

### フローチャートの説明

1. **計画書の作成**からスタートし、**アクションプラン**と具体的支援内容を決定
2. 初期トレーニングで基礎技術を習得し、その知識を評価
3. 評価に応じて次のステップに進むか、基礎トレーニング
4. 中級トレーニングとしてHTTPリクエストやREST APIを学び、トラブルシューティング能力を評価
5. 十分な能力がついた段階で、応用トレーニングに進み、最終的にエスカレーションやトラブルシューティングの練習
6. 成長評価と進捗モニタリングを実施し、達成目標に沿って最終評価

### マイルストーン・アクションプラン表

| マイルストーン         | アクションプランの内容                                                             | 日数 | 備考                           |
|------------------------|------------------------------------------------------------------------------|------|--------------------------------|
| **計画書の作成**       | 育成計画の趣旨・目標の確認、スケジュールの策定                                 | 3日  | スタート段階                   |
| **アクションプラン決定**| 必要となる具体的アクションと金銭的支援の検討                                   | 5日  | 支援内容を含めて計画書に反映   |
| **初期トレーニング開始**| Power Apps / Power Automateの基礎知識習得                                      | 10日 | 理論と実践                      |
| **基礎知識評価**       | 基礎知識の評価テストおよびレビュー                                             | 2日  | 必要に応じて再トレーニング     |
| **中級トレーニング**    | HTTPリクエスト、SharePoint REST APIの利用法学習                               | 15日 | 実務に即した応用技術の習得     |
| **トラブルシューティング能力評価** | エラーハンドリングの演習と評価                                   | 3日  | 評価基準に基づく実地テスト     |
| **応用トレーニング**    | 承認ワークフローの理解、システム設計の応用                                    | 10日 | 実際のワークフローでの応用     |
| **エスカレーション練習**| トラブル発生時のエスカレーション手順の確認と実践                              | 3日  | エスカレーション能力の評価     |
| **進捗モニタリング**    | 全体の進捗確認、成長度合いの評価                                             | 5日  | 各段階ごとに進捗を可視化       |
| **最終成長評価**       | 成長評価を基に、最終的な評価と次のステップの確認                              | 2日  | 計画完了、もしくは再評価へ    |

### 全体のスケジュール

- **総日数**: 約58日（約2ヶ月）



ガントチャート形式での表示をExcel VBAで実現するため、以下にVBAマクロコードを提供します。このコードは、作成した日数ベースのスケジュールをExcelに入力し、ガントチャート形式で表現するものです。

1. Excelの列にマイルストーンや日数を入力します。
2. 日数をもとに開始日と終了日を自動的に計算し、ガントチャート形式のセルの塗りつぶしで視覚化します。

以下に、Mermaidを使用した二段階承認ワークフローのフローチャートのコード例を示します。このフローチャートは、二段階の承認プロセスを視覚的に表現しています。

```mermaid
graph TD
    Start[リクエストの提出] --> FirstApproval[一次承認]
    FirstApproval -->|承認| SecondApproval[二次承認]
    FirstApproval -->|差戻し| Requester[リクエスト修正]
    SecondApproval -->|承認| Approved[最終承認]
    SecondApproval -->|差戻し| Requester
    Approved --> End[ワークフロー完了]
```

---

### フローチャート概要

1. **リクエストの提出**  
   利用者がリクエストを提出し、ワークフローが開始されます。

2. **一次承認**  
   一次承認者がリクエストを確認し、承認または差戻しを行います。
   - 承認の場合、二次承認へ進みます。
   - 差戻しの場合、リクエスト提出者に修正が求められます。

3. **二次承認**  
   二次承認者がリクエストを確認し、最終承認または差戻しを行います。
   - 最終承認の場合、ワークフローが完了します。
   - 差戻しの場合、リクエスト提出者に再度修正が求められます。

4. **ワークフロー完了**  
   二段階の承認が完了した時点で、ワークフローが終了します。

このフローチャートは、Mermaid記法を使用してPower Automateの二段階承認フローのプロセスをわかりやすく可視化しています。

### ステップ1: データ入力
1. Excelシートに以下のような形式でデータを入力してください。

| マイルストーン                    | 開始日       | 日数 | 終了日       |
|---------------------------------|-------------|------|-------------|
| 計画書の作成                    | 2024/11/14  | 3    | 自動計算      |
| アクションプラン決定             | 自動計算    | 5    | 自動計算      |
| 初期トレーニング開始            | 自動計算    | 10   | 自動計算      |
| 基礎知識評価                    | 自動計算    | 2    | 自動計算      |
| 中級トレーニング                | 自動計算    | 15   | 自動計算      |
| トラブルシューティング能力評価   | 自動計算    | 3    | 自動計算      |
| 応用トレーニング                | 自動計算    | 10   | 自動計算      |
| エスカレーション練習            | 自動計算    | 3    | 自動計算      |
| 進捗モニタリング                | 自動計算    | 5    | 自動計算      |
| 最終成長評価                    | 自動計算    | 2    | 自動計算      |

### ステップ2: Excel VBAコード

次に、Excel VBAのモジュールに以下のコードを入力し、実行してください。このコードは「開始日」をもとに終了日を自動計算し、ガントチャートを作成します。

```vba
Sub CreateGanttChart()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets(1) ' ガントチャートを作成するシート
    
    Dim startRow As Integer
    startRow = 2 ' データ開始行
    
    Dim startCol As Integer
    startCol = 2 ' 開始日列
    
    Dim daysCol As Integer
    daysCol = 3 ' 日数列
    
    Dim endCol As Integer
    endCol = 4 ' 終了日列
    
    Dim chartStartCol As Integer
    chartStartCol = 6 ' ガントチャート開始列
    
    Dim maxDays As Integer
    maxDays = 60 ' ガントチャート期間 (日数)
    
    Dim i As Integer
    Dim startDate As Date
    Dim endDate As Date
    Dim duration As Integer
    
    ' シートをクリア
    ws.Cells.Clear
    
    ' ヘッダー作成
    ws.Cells(1, startCol).Value = "開始日"
    ws.Cells(1, daysCol).Value = "日数"
    ws.Cells(1, endCol).Value = "終了日"
    ws.Cells(1, chartStartCol).Value = "ガントチャート"
    
    ' マイルストーンデータの入力
    For i = startRow To ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        startDate = ws.Cells(i, startCol).Value
        duration = ws.Cells(i, daysCol).Value
        endDate = startDate + duration - 1
        ws.Cells(i, endCol).Value = endDate ' 終了日を入力
        
        ' ガントチャートの作成
        Dim j As Integer
        For j = 0 To duration - 1
            ws.Cells(i, chartStartCol + j).Interior.Color = RGB(0, 102, 204) ' セルの塗りつぶし
        Next j
    Next i
    
    ' ガントチャート列の見出しに日付を追加
    Dim k As Integer
    For k = 0 To maxDays - 1
        ws.Cells(1, chartStartCol + k).Value = startDate + k
        ws.Cells(1, chartStartCol + k).NumberFormat = "m/d"
    Next k
End Sub
```

### ステップ3: マクロの実行

1. マクロを実行すると、各マイルストーンの「終了日」が自動計算され、日数に基づいたガントチャートが作成されます。
2. チャートは青いセルで表され、セルの塗りつぶしで日数が可視化されます。

以下に、達成すべきレベルの要件について詳細化しました。

### 達成すべきレベルの要件詳細

1. **独立してデバッグを完了できる能力**
   - **要件**: 自身でエラーや問題の原因を特定し、解決策を実施できるスキル。
   - **内容**:
     - Power Apps、Power Automate、および関連システムでのデバッグ手法に精通する。
     - エラーコードの解釈やログの確認、トラブルシューティングツールの使用方法に習熟する。
     - 既存の機能やプロセスで発生した問題について、原因分析から対処までを完結できる。

2. **Power Automate、Canvasアプリ、Model-drivenアプリの理解**
   - **要件**: Power Platformの主要機能（Power Automate、Canvasアプリ、Model-drivenアプリ）の各特性を理解し、適切に使い分けられる。
   - **内容**:
     - Power Automateのワークフロー自動化に関する知識と設定方法を理解し、アクション、トリガー、および条件の利用方法に精通する。
     - Canvasアプリの自由度の高いレイアウトとカスタマイズ性を活かし、シンプルかつユーザーフレンドリーなアプリを設計・開発できる。
     - Model-drivenアプリのデータ管理や標準化されたUI構築の概念を理解し、データベース（Dataverse）を使った効率的なデータ管理アプローチを活用できる。

3. **クライアントの求める機能をCanvasアプリで実装できる能力**
   - **要件**: クライアントの要望を適切に解釈し、それに応じた機能をCanvasアプリで一人で設計・開発・実装できるスキル。
   - **内容**:
     - クライアントの要求に対する要件定義、機能設計、UI設計のプロセスを独自に行う。
     - クライアントの業務フローを把握し、それに沿ったCanvasアプリを実装。
     - アプリ開発の各フェーズ（設計、開発、テスト、リリース）を管理し、クライアントとのコミュニケーションを通じて機能やUIの改善ができる。

SharePointリストビューのJSONによる基本的な書式設定を用いて、カードデザイナーを活用したデザインを構築します。以下は、リストアイテムをカード形式で表示するためのシンプルなJSONコード例です。これをベースに、さらに高度なデザインを作成していくと良いでしょう。

### 基本的なJSONコード例

```json
{
  "$schema": "https://developer.microsoft.com/json-schemas/sp/view-formatting.schema.json",
  "hideSelection": true,
  "rowFormatter": {
    "elmType": "div",
    "style": {
      "display": "flex",
      "flexDirection": "column",
      "border": "1px solid #e0e0e0",
      "borderRadius": "5px",
      "padding": "10px",
      "marginBottom": "10px",
      "backgroundColor": "#ffffff"
    },
    "children": [
      {
        "elmType": "div",
        "style": {
          "fontSize": "16px",
          "fontWeight": "bold",
          "marginBottom": "5px",
          "color": "#333333"
        },
        "txtContent": "@currentField.Title"
      },
      {
        "elmType": "div",
        "style": {
          "fontSize": "14px",
          "color": "#666666"
        },
        "txtContent": "@currentField.Description"
      },
      {
        "elmType": "div",
        "style": {
          "fontSize": "12px",
          "marginTop": "10px",
          "color": "#999999"
        },
        "txtContent": "Created: @currentField.Created"
      }
    ]
  }
}
```

### 説明
- `hideSelection`: 選択ボックスを非表示にします。
- `elmType`: 各要素の種類を指定しています。`div`はブロック要素です。
- `style`: フォントサイズや色、背景色などのスタイルを設定します。
- `txtContent`: 各フィールドの内容を表示します。`@currentField`は、リストアイテムのフィールド値を取得します。

この基本デザインを使って、より詳細な要件に基づきカスタマイズが可能です。カード内のレイアウトやスタイルを変更することで、独自の見栄えのビューを作成できます。

内容をブラッシュアップし、L表記の誤りを修正し、Microsoftの公式表現に合わせて記述しました。

---

### 音声文字起こし（ブラッシュアップ版）

Microsoft Power Automateでの承認ワークフローについて、以下の手順で進めます。まず、承認プロセスの流れを箇条書きで示し、その後、フローチャート形式で可視化します。フローチャートの作成にはMermaid記法を使用してください。

1. **承認ワークフローの流れを箇条書きで示す**  
   Power Automateの承認機能を使ったワークフローの概要を、以下の手順で表現します。

2. **フローチャート形式での可視化**  
   上記の流れを基に、Mermaid記法を用いて承認ワークフローのフローチャートを作成します。

3. **クライアント向けのPower Automate説明**  
   クライアントに向けてPower Automateの承認機能について説明を行います。説明には以下の点を含めます。

   - **全社公開資料の扱い**  
     全社公開資料については、**ドキュメントライブラリ**を利用してアクセス権限を管理します。Power Platformの機能を活用し、公開資料へのアクセス管理を円滑に行う方法について説明します。

   - **機密資料の扱い**  
     特定の資料については、Power Automateの参照機能を活用し、アクセス制御を行います。この際、データ呼び出しの参照先を指定し、必要な情報のみを取得するように設定します。

4. **懸念点の共有**  
   Power Automateの機能を利用する上で、**容量制限**があるため、特定の承認ワークフローの容量要件が満たせない場合がある点についてもクライアントと共有します。

以下のように、断定系で箇条書きに変更しました。

---

### ディスカッションペーパー概要資料

#### 1. Power Automateによる承認ワークフローの概要
   - **目的**  
     Power Automateを活用し、効率的かつ統制された承認フローを確立する。
     
   - **承認フローの主要ステップ**  
     - **リクエストの受領**  
       利用者が必要なリクエストを提出すると、ワークフローが開始される。
     - **承認者への通知**  
       承認者にリクエスト内容が通知され、確認が促される。
     - **承認または差戻し**  
       承認者はリクエストを承認または差し戻し、その結果に基づき次のステップが進行する。

#### 1. 公開資料と機密資料の管理
   - **全社公開資料**  
     全社公開資料は、ドキュメントライブラリを利用してアクセス権限を設定し管理する。
     - **利点**  
       アクセス制御が容易で、必要なメンバーが即座に閲覧可能な状態を保つ。

   - **機密資料**  
     機密資料や限定公開したい資料に対しては、Power Automateを活用してアクセス制御を強化する。
     - **参照機能の活用**  
       承認ワークフローで設定した参照先に基づき、アクセス権限を制御する。

#### 2. Power Automateの容量制限についての懸念点
   - Power Automateにはデータ容量や実行回数に制限があるため、大量のデータを処理するワークフローには対応が難しい場合がある。
   - 必要に応じて容量管理の最適化や他のサービスの併用を推奨する。

以下のように修正しました。

これから、クライアントとの会議でAzure SQLデータベースにおけるデータ処理やETL（抽出、変換、ロード）に関するヒアリングを行う予定です。この会議に向けて、論点を整理したディスカッションペーパーの作成が求められています。ディスカッションペーパーには記載すべき事項の要約を含める必要があります。

また、プロジェクトチームのメンバーには、Power Automateのデータフロー機能を活用して、Azure SQLデータベースとSharePointリストのデータを統合するプロセスの流れをまとめてもらいます。

実際に行うべきタスクとしては以下の通りです：
1. データフローの実装
2. データフローの内容の可視化

以下に、改善提案を避け、Azure SQLデータベースの内容可視化に焦点を当てたディスカッションペーパーの例を示します。

---

**ディスカッションペーパー：Azure SQLデータベースの処理内容可視化**

### 目的
クライアントとの会議において、Azure SQLデータベース内のデータ処理内容および更新サイクルの可視化を進め、データ処理の流れとデータソースについての理解を深める。

### 議題
1. **Azure SQLデータベースの更新サイクルの詳細**
   - データ更新の頻度、タイミング、およびバッチ実行のスケジュール
   - 更新サイクルに関するトリガー条件や設定の確認

2. **データ処理内容の詳細な把握**
   - 各処理工程（データ抽出、変換、ロード）の内容とその順序
   - 処理で使用されるSQLクエリやストアドプロシージャの内容（必要に応じてサンプルコードの提供）
   - 処理内容が変更されるタイミングとその影響範囲の確認

3. **データの出所とダンプデータのソースの調査**
   - SQLにダンプされているデータの出所となるシステムやファイルの確認
   - ダンプされるデータの加工前後の流れ（データ形式の変更が行われている場合、その詳細）
   - ダンプデータの作成時に実行される具体的な処理やフィルタリング条件

4. **SQLデータベースの可視化手法**
   - 現在のデータベース構造やテーブル間のリレーションシップ図
   - 各テーブル・カラムに格納されるデータ内容とその利用目的
   - データの流入・流出に関する概要情報（どのテーブルに、どのようなデータが追加されるか）

5. **次回のステップ**
   - データ処理内容の可視化を進める上での追加資料やログの要件
   - 各処理内容やデータソースの確認作業の担当者およびスケジュール

### 期待される成果
- Azure SQLデータベース内での更新サイクル、処理内容、ダンプデータの出所が明確になる
- クライアントがデータ処理内容を理解し、今後のデータ運用や監視のための基礎情報が得られる
- 必要な可視化資料が整備され、SQLデータベースの内容に関する情報提供がスムーズに行えるようになる

### Power Automateによる自動同期の処理内容

1. **トリガーの設定**
   - マスターデータリストで「アイテムが作成または更新されたとき」をトリガーに設定し、変更を検知。

2. **データ取得**
   - トリガー発動時に変更のあったアイテムのデータを取得。

3. **条件分岐**
   - 各同期先サイトのリストに該当アイテムが存在するかを確認する条件分岐を実行。

4. **アイテムの更新または作成**
   - **アイテムが存在する場合**: 対応する「更新アイテム」アクションでデータを同期。
   - **アイテムが存在しない場合**: 「アイテムを作成」アクションで新規に作成し、データを同期。

5. **複数サイト対応**
   - 同期対象が複数サイトにわたる場合、「アレイの適用先」アクションで各サイトに対し、上記の処理（条件分岐とアイテム更新・作成）を順に適用。

6. **エラーハンドリング**
   - 処理中にエラーが発生した場合、通知アクションで管理者に知らせる。
   - 再試行ポリシーを設定し、一時的なエラーが発生しても自動再試行。

7. **ログと通知**
   - 処理完了後、成功・失敗に関わらず処理ログを記録し、必要に応じて通知を送信。


graph TD
    A[トリガー: マスターデータリストのアイテムが作成または更新] --> B[データ取得: 更新アイテム情報を取得]
    B --> C[条件分岐: 各サイトに該当アイテムが存在するか確認]
    
    C -->|存在する| D[アイテム更新: 更新アイテムデータを同期]
    C -->|存在しない| E[アイテム作成: 新規アイテムを作成しデータを同期]
    
    D --> F[次サイトへの繰り返し: アレイの適用先で複数サイト対応]
    E --> F
    
    F --> G[エラーハンドリング: 再試行ポリシーとエラー通知]
    G --> H[ログと通知: 処理完了後の記録と通知]
